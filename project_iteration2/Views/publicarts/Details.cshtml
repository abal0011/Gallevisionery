@model project_iteration2.Models.publicart

@{
    ViewBag.Title = "Details";
}
<style>
    #secondSection {
         position: relative;
    top: 100vh;
    margin: 5rem;
    width: 100%;
    }
    #lineChart {
    position: absolute;
    left: 300px;
    top: 120px;
}

    #instructions {
        position: static;
        margin: 0px;
        width: 30%;
        top: 0;
        bottom: 20%;
        padding: 5px;
        background-color: rgba(255, 255, 255, 0.9);
        overflow-y: scroll;
        font-family: sans-serif;
        font-size: 0.8em;
        line-height: 2em;
        float: right;
    }

    .duration {
        font-size: 2em;
    }

    .geocoder {
        position: relative;
        z-index: 1;
        width: 200%;
        left: 50%;
        margin-left: -25%;
        top: 20px;
    }

    .mapboxgl-ctrl-geocoder {
        min-width: 200%;
    }

   .forthBanner {
    position: absolute;
    top: 100vh;
    margin-top: 0rem;
    left: -5rem;
    right: -5rem;
    z-index: -1;    
}
</style>
<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            @Html.ActionLink("GALLEVISIONERY", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
        </div>
        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li>
                    @Html.ActionLink("BACK ", "Index", "publicarts")
                </li>
                </ul>

        </div>
    </div>
</div>
<div class="temp"></div>
<div class="first-block"></div>
<div class="second-block"></div>
 @{  var temp = @Model.Unisex;
     double toilets = Convert.ToDouble(@Model.Toilet_);
     int? NoOfCf = @Model.NoOFCF;
     int? NoOfBsn = @Model.NoOfBsn;
     int? NoOfArt = @Model.NoOfArt;
 }
<div class="loader">
    <ul>
        <li>L</li>
        <li>O</li>
        <li>A</li>
        <li>D</li>
        <li>I</li>
        <li>N</li>
        <li>G</li>
    </ul>
</div>
<div class="third-block"></div>

<br/>
<div class="logo">
   <br/>
</div>
<div class="content">
    <div class="heading">
        <!-- INSERT DATA HERE -->
        <span>@Model.Gallery_Name</span>
    </div>
    <div class="desc">
        <!-- INSERT DATA HERE -->
        <p><b>@Model.Gallery_Type Gallery </b><br/>
        <b> Suitable Art:</b> @if(@Model.Painting == "Y"){ <span>Painting</span>} 
                          @if(@Model.Performance == "Y"){<span>Performance</span>}
                          @if(@Model.Installation == "Y"){<span>Installation</span>}
                          @if(@Model.Sculpture == "Y"){<span>Sculpture</span>}
                          @if(@Model.Photography == "Y"){<span>Photography</span>}</p>
    </div>
    <div class="link">
        <button type="button" onclick="window.location.href='@Model.Website'">VISIT WEBSITE</button>
    </div>
    <H4>Ameneties</H4>
    @* Toilet data *@
    @if (temp == "Y" && toilets >= 2)
    {
        <i class="material-icons" title="Accessible Toilets nearby: @Model.Toilet_" style="font-size:36px; color:red;">accessible</i>
    }
    else if (temp == "Y")
    {
        <i class="material-icons" title="Accessible Toilets nearby: @Model.Toilet_ " style="font-size:36px;">accessible</i>
    }
    @*Cafe and Restaurant data*@
    @if (NoOfCf >= 23)
    {
        <i class="material-icons" title="No of Restaurants & Cafes: @Model.NoOFCF" style="font-size:36px; color:red;">restaurant</i>
    }
    else if (NoOfCf > 0 && NoOfCf < 23)
    {
        <i class="material-icons" title="No of Restaurants $ Cafes: @Model.NoOFCF" style="font-size:36px;">restaurant</i>
    }
    @*business data*@
    @if (NoOfBsn >= 170)
    {
        <i class="material-icons" title="No of Business Nearby: @Model.NoOfBsn" style="font-size:36px; color:red;">work</i>
    }
    else if (NoOfBsn > 0 && NoOfBsn < 170)
    {
        <i class="material-icons" title="No of Business Nearby: @Model.NoOfBsn" style="font-size:36px;">work</i>
    }
    @* Arts Around *@
    @if (NoOfArt >= 22)
    {
        <i class="material-icons" title="No of Public arts Nearby: @Model.NoOfArt" style="font-size:36px; color:red;">wallpaper</i>

    }
    else if (NoOfArt > 0 && NoOfArt < 22)
    {
        <i class="material-icons" title="No of Public arts Nearby: @Model.NoOfArt" style="font-size:36px; ">wallpaper</i>

    }
    <br />
    Gallery Rating by Amenities:
    @if ((NoOfArt + NoOfBsn + NoOfCf) <= 81)
    {
        <i class="material-icons">star</i>
        <i class="material-icons">star_border</i>
        <i class="material-icons">star_border</i>
        <i class="material-icons">star_border</i>
        <i class="material-icons">star_border</i>
    }
    else if ((NoOfArt + NoOfBsn + NoOfCf) > 81 && (NoOfArt + NoOfBsn + NoOfCf) < 169)
    {
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star_border</i>
        <i class="material-icons">star_border</i>
        <i class="material-icons">star_border</i>
    }
    else if ((NoOfArt + NoOfBsn + NoOfCf) > 169 && (NoOfArt + NoOfBsn + NoOfCf) < 252)
    {
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star_border</i>
        <i class="material-icons">star_border</i>
    }
    else if ((NoOfArt + NoOfBsn + NoOfCf) > 252 && (NoOfArt + NoOfBsn + NoOfCf) < 335)
    {
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star_border</i>
    }
    else
    {
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
        <i class="material-icons">star</i>
    }
</div>
<div class="img">
    <img class="top" src="~/Content/picture/@Model.Id/image1.jpg"/>
   
</div>

<div class="hours">
     
</div>




@Html.ActionLink("Back to List", "Index")
<script type="text/javascript">
    TweenMax.from(".logo", 1.6, {
        delay: 6.4,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from(".download", 1.6, {
        delay: 6.5,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from(".heading", 1.6, {
        delay: 6.6,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from(".desc", 1.6, {
        delay: 6.7,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from("button", 1.6, {
        delay: 6.8,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from(".watch", 1.6, {
        delay: 6.9,
        opacity: 0,
        y: 30,
        rotation: 90,
        ease: Expo.easeInOut
    });

    TweenMax.staggerFrom(".media ul li", 2, {
        delay: 7,
        opacity: 0,
        y: 40,
        ease: Expo.easeInOut
    }, 0.2);

</script>
<div id="secondSection" class="container">
    <!--
    <div class="deco">
        <img src="deco1.png" alt="">
    </div>
    -->
    <div class="backColor"></div>
    <h1>How many <span style="font-size: 3rem; color: black; text-shadow: 6px 12px #c5c5c5;">people </span>walk past this gallery every day?</h1>
    <h3>More people walking past on the days this gallery is open, the better for your business!</h3>

    <!-- INSERT OPENING HOURS-->
    <div class="hours">
        <button type="button">Opening Hours</button>
        <ul>
            <li>Mon: @Model.Monday </li>
            <li>Tue: @Model.Tuesday </li>
            <li>Wed: @Model.Wednesday</li>
            <li>Thu: @Model.Thursday</li>
            <li>Fri: @Model.Friday</li>
            <li>Sat: @Model.Saturday</li>
            <li>Sun: @Model.Sunday</li>
            
        </ul>
    </div>
    <!-- INSERT PEDESTRIAN CHART HERE-->
    <canvas id="lineChart" height="400" width="800"></canvas>
    <script src="~/Content/lineChart.js"></script>

    <!--<div class="thirdBanner"><img src="deco2.png" alt="" style="height: 200px; width: 100%;"></div> -->
    <div class="thirdBanner"></div>
</div>
<div id="thirdSection" style=" position: relative;
    top: 200vh;
    margin: 5rem;"class="container">
        
    <div class="dummy2">
        <h1>What is near this gallery within a</h1>
        <h4 style=" font-family: "Roboto Lt", sans-serif;
            font-size: 4rem;
            text-align: center;
            letter-spacing: 0px;
            text-decoration-line: overline;">500m</h4>
        <h1>radius?</h1>
    </div>

    <!-- INSERT AMENITY ICONS HERE-->
    <div class="icons"></div>

    <!-- INSERT AMENITY CHART HERE-->
    <canvas id="radarChart" style=" position: absolute;
    left: 200px;
    top: 200px;" height="400" width="800"></canvas>
    <script src="~/Content/radarChart.js"></script>
        
    <div class="forthBanner"><img src="~/Content/images/deco2.png" alt="" style="height: 200px; width: 100%;"></div>

</div>
<!-- FORTH SECTION STARTS HERE-->
<!--Map Section-->
<div id="forthSection" class="container">
    <div class="dummy3">
        <h1>How to get around if you are at this gallery?</h1>
        <h3>If you are after cafes, restaurants, bars, officeworks and anything else.</h3>

        <!-- INSERT THE MAP HERE-->
        <div class="map">
            <div  id="map" style="position:absolute;  height:300px; width: 600px;"></div>
            <div class="container">
                <div id="instructions"></div>
            </div>
        </div>

    </div>

</div>
<script>
    var longitude = @Model.Longitude;
    var latitude = @Model.Latitude;
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXJhdmluZC1jeWJlciIsImEiOiJjam1tenl0ZGcwaW0wM3BrNDRkNHRmZzdpIn0.gYT_2NFoZwQ8SboZ1r6LcQ';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [longitude, latitude],
        zoom: 12.3
    });



    var marker = new mapboxgl.Marker()
        .setLngLat([longitude, latitude])
        .addTo(map);


    function getRoute(end) {
        // make a directions request using cycling profile
        var url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + longitude + ',' + latitude + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYXJhdmluZC1jeWJlciIsImEiOiJjam1tenl0ZGcwaW0wM3BrNDRkNHRmZzdpIn0.gYT_2NFoZwQ8SboZ1r6LcQ'
        console.log(url);

        // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
        var req = new XMLHttpRequest();
        req.responseType = 'json';
        req.open('GET', url, true);
        req.onload = function () {
            var data = req.response.routes[0];
            var route = data.geometry.coordinates;
            var geojson = {
                type: 'Feature',
                properties: {},
                geometry: {
                    type: 'LineString',
                    coordinates: route
                }
            };
            // if the route already exists on the map, reset it using setData
            if (map.getSource('route')) {
                map.getSource('route').setData(geojson);
            } else { // otherwise, make a new request
                map.addLayer({
                    id: 'route',
                    type: 'line',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'LineString',
                                coordinates: geojson
                            }
                        }
                    },
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    paint: {
                        'line-color': '#3887be',
                        'line-width': 5,
                        'line-opacity': 0.75
                    }
                });
            }
            var instructions = document.getElementById('instructions');
            var steps = data.legs[0].steps;

            var tripInstructions = [];
            for (var i = 0; i < steps.length; i++) {
                tripInstructions.push('<br><li>' + steps[i].maneuver.instruction) + '</li>';
                instructions.innerHTML = '<br><h4><b>Search Results like Cafe, Business, Restaurants in the proximity of the Gallery</b></h4><span class="duration">Trip duration: ' + Math.floor(data.duration / 60) + ' min 🚴 ' + Math.floor(data.distance) + ' meters </span>';
            }
        };
        req.send();
    }
    // Add the geocoder to the map


    var geocoder = new MapboxGeocoder({ // Initialize the geocoder
        accessToken: 'pk.eyJ1IjoiYXJhdmluZC1jeWJlciIsImEiOiJjam1tenl0ZGcwaW0wM3BrNDRkNHRmZzdpIn0.gYT_2NFoZwQ8SboZ1r6LcQ', // Set the access token
        placeholder: 'Type in Cafe/Restaurant/Business etc ..', // Placeholder text for the search bar
        bbox: [144.939128, -37.823089, 144.98376, -37.800214], // Boundary for Berkeley
        proximity: {
            longitude: longitude,
            latitude: latitude
        }
    });

    map.addControl(geocoder);

    map.on('load', function () {
        // make an initial directions request that
        // starts and ends at the same location
        var start = [window.longitude, window.latitude];

        getRoute(start);

        // Add starting point to the map
        map.addLayer({
            id: 'mypoint',
            type: 'circle',
            source: {
                type: 'geojson',
                data: {
                    type: 'FeatureCollection',
                    features: [{
                        type: 'Feature',
                        properties: {},
                        geometry: {
                            type: 'Point',
                            coordinates: start
                        }
                    }
                    ]
                }
            },
            paint: {
                'circle-radius': 10,
                'circle-color': '#3887be'
            }
        });

        map.addSource('single-point', {
            type: 'geojson',
            data: {
                type: 'FeatureCollection',
                features: []
            }
        });

        map.addLayer({
            id: 'point',
            source: 'single-point',
            type: 'circle',
            paint: {
                'circle-radius': 10,
                'circle-color': '#448ee4'
            }
        });


        // Listen for the `result` event from the Geocoder
        // `result` event is triggered when a user makes a selection
        //  Add a marker at the result's coordinates
        geocoder.on('result', function (e) {
            window.coor = e.result.geometry;
            map.getSource('single-point').setData(e.result.geometry);
            console.log(window.coor.coordinates);
            getRoute(window.coor.coordinates);
        });


    });
    map.addControl(new mapboxgl.NavigationControl());


</script>