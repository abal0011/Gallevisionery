@model project_iteration2.Models.publicart

@{
    ViewBag.Title = "Details";
}
<style>
    body {
        margin-left: -6%;
        overflow-x: hidden;
    }

    #secondSection {
        position: relative;
        top: 100vh;
        margin: 5rem;
        width: 100%;
    }

    #lineChart {
        position: absolute;
        top: 120px;
    }

    #instructions {
        position: static;
        margin: 0px;
        width: 30%;
        top: 0;
        bottom: 20%;
        padding: 5px;
        background-color: rgba(255, 255, 255, 0.9);
        overflow-y: scroll;
        font-family: sans-serif;
        font-size: 0.8em;
        line-height: 2em;
        float: right;
    }

    .duration {
        font-size: 2em;
    }

    .geocoder {
        position: relative;
        z-index: 1;
        width: 200%;
        left: 50%;
        margin-left: -25%;
        top: 20px;
    }

    .mapboxgl-ctrl-geocoder {
        min-width: 200%;
    }

    .forthBanner {
        position: absolute;
        top: 100vh;
        margin-top: -5rem;
        left: -5rem;
        right: -5rem;
        z-index: -1;
    }
    /*Trial of image slider*/
    * {box-sizing: border-box;}

.img-comp-container {
  position: relative;
  margin-left:53.5%;
  margin-top:15%;
  height: 250px; /*should be the same height as the images*/
}

.img-comp-img {
  position: absolute;
  width: auto;
  height: auto;
  overflow: hidden;
}

.img-comp-img img {
  display: block;
  vertical-align: middle;
}

.img-comp-slider {
  position: absolute;
  z-index: 9;
  cursor: ew-resize;
  /*set the appearance of the slider:*/
  width: 40px;
  height: 40px;
  background-color: #2196F3;
  opacity: 0.7;
  border-radius: 50%;
}
#mapIcon:hover {
    transform: scale(1.5);
      fill:gold;
    background:gold;
    transition: background 0.5s, transform 0.5s ease-out, fill 0.5s;
}
#toTop:hover {
    transform: scale(1.5);
      
    transition: background 0.5s, transform 0.5s ease-out, fill 0.5s;
}
</style>
<div class="navbar navbar-inverse navbar-fixed-top" style="width:100vw; ">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            @Html.ActionLink("GALLEVISIONERY", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
        </div>
        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li>
                    <a href="#secondSection">Foot Traffic</a>
                </li>
                <li>
                    <a href="#map">MAP</a>
                </li>
                <li>
                    @Html.ActionLink("BACK ", "Index", "publicarts")
                </li>
                <li>
                    @Html.ActionLink("COMPARE-GALLERIES", "compare", "publicarts")
                </li>
            </ul>

        </div>
    </div>
</div>
<div class="temp"></div>
<a name="first">
    <div class="first-block"></div>
</a>
<div class="second-block"></div>
@{ var temp = @Model.Unisex;
    double toilets = Convert.ToDouble(@Model.Toilet_);
    int? NoOfCf = @Model.NoOFCF;
    int? NoOfBsn = @Model.NoOfBsn;
    int? NoOfArt = @Model.NoOfArt;
    int? transport = @Model.Parking;
    int? foot = @Model.MonPed + @Model.TuesPed + @Model.WedPed + @Model.ThursPed + @Model.FriPed + @Model.SatPed + @Model.SunPed;
    int? MonPed1 = @Model.MonPed;
    int? TuesPed1 = @Model.TuesPed;
    int? WedPed1 = @Model.WedPed;
    int? ThursPed1 = @Model.ThursPed;
    int? FriPed1 = @Model.FriPed;
    int? SatPed1 = @Model.SatPed;
    int? SunPed1 = @Model.SunPed;

    int? MonPed2 = @Model.MonPed2;
    int? TuesPed2 = @Model.TuesPed2;
    int? WedPed2 = @Model.WedPed2;
    int? ThursPed2 = @Model.ThursPed2;
    int? FriPed2 = @Model.FriPed2;
    int? SatPed2 = @Model.SatPed2;
    int? SunPed2 = @Model.SunPed2;

    int? MonPed3 = @Model.MonPed3;
    int? TuesPed3 = @Model.TuesPed3;
    int? WedPed3 = @Model.WedPed3;
    int? ThursPed3 = @Model.ThursPed3;
    int? FriPed3 = @Model.FriPed3;
    int? SatPed3 = @Model.SatPed3;
    int? SunPed3 = @Model.SunPed3;
}
<div class="loader">
    <ul>
        <li>L</li>
        <li>O</li>
        <li>A</li>
        <li>D</li>
        <li>I</li>
        <li>N</li>
        <li>G</li>
    </ul>
</div>
<div class="third-block"></div>

<br />
<div class="logo">
    <br />
</div>
<div class="content">
    <div class="heading">
        <!-- INSERT DATA HERE -->
        <span>@Model.Gallery_Name</span>
    </div>
    <br />
    <div class="desc">
        <!-- INSERT DATA HERE -->
        <p>
            <b>@Model.Gallery_Type Gallery </b><br />
            <b> Suitable Art:</b> @if (@Model.Painting == "Y")
            {<span>Painting</span>}
            @if (@Model.Performance == "Y")
            {<span>Performance</span>}
            @if (@Model.Installation == "Y")
            {<span>Installation</span>}
            @if (@Model.Sculpture == "Y")
            {<span>Sculpture</span>}
            @if (@Model.Photography == "Y")
            {<span>Photography</span>}
            @if (@Model.Visual == "Y")
            {<span> Visual Art</span>}
        </p>
    </div>
    <br />
    <div class="link">
        <button type="button" onclick="window.location.href='@Model.Website'">VISIT WEBSITE</button>
    </div>
    <br />
    <div class="amenitiesID">
        <H4>
            <b>Amenities</b>
            <a target="_blank" href="#" title="Hi, Each Gallery can have amenities from
               Restaurants,Cafes, Office Blocks and 
               Unisex/Accessible Toilets in and around it.">
                <img src="https://www.clipartmax.com/png/small/216-2165034_openoffice-blue-question-mark-png.png" height="13px" style="margin-bottom: 7px;">
            </a>
        </H4>
        @* Toilet data *@
        @if (temp == "Y" && toilets >= 2)
        {
            <i class="material-icons" title="Accessible Toilets nearby: @Model.Toilet_" style="font-size:36px; margin-left:5%; ">accessible</i>
        }
        else if (temp == "Y")
        {
            <i class="material-icons" title="Accessible Toilets nearby: @Model.Toilet_ " style="font-size:36px; color:grey;margin-left:5%;">accessible</i>
        }
        @*Cafe and Restaurant data*@
        @if (NoOfCf >= 23)
        {
            <i class="material-icons" title="No of Restaurants & Cafes: @Model.NoOFCF" style="font-size:36px;margin-left:5%; ">restaurant</i>
        }
        else if (NoOfCf > 0 && NoOfCf < 23)
        {
            <i class="material-icons" title="No of Restaurants & Cafes: @Model.NoOFCF" style="font-size:36px; color:grey;margin-left:5%;">restaurant</i>
        }
        @*business data*@
        @if (NoOfBsn >= 170)
        {
            <i class="material-icons" title="No of Business Nearby: @Model.NoOfBsn" style="font-size:36px; margin-left:5%;">work</i>
        }
        else if (NoOfBsn > 0 && NoOfBsn < 170)
        {
            <i class="material-icons" title="No of Business Nearby: @Model.NoOfBsn" style="font-size:36px; color:grey; margin-left:5%;">work</i>
        }
        @* Arts Around *@
        @if (NoOfArt >= 22)
        {
            <i class="material-icons" title="No of Public arts Nearby: @Model.NoOfArt" style="font-size:36px; margin-left:5%;">wallpaper</i>

        }
        else if (NoOfArt > 0 && NoOfArt < 22)
        {
            <i class="material-icons" title="No of Public arts Nearby: @Model.NoOfArt" style="font-size:36px; color:grey;margin-left:5%;">wallpaper</i>

        }
    </div>
    <br />
    <div class="Ranking" style="top:4px;">
        <b>Gallery Rating by Amenities :</b>
        @if ((NoOfArt + NoOfBsn + NoOfCf) <= 81)
        {
            <i class="material-icons">star</i>
            <i class="material-icons">star_border</i>
            <i class="material-icons">star_border</i>
            <i class="material-icons">star_border</i>
            <i class="material-icons">star_border</i>
        }
        else if ((NoOfArt + NoOfBsn + NoOfCf) > 81 && (NoOfArt + NoOfBsn + NoOfCf) < 169)
        {
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star_border</i>
            <i class="material-icons">star_border</i>
            <i class="material-icons">star_border</i>
        }
        else if ((NoOfArt + NoOfBsn + NoOfCf) > 169 && (NoOfArt + NoOfBsn + NoOfCf) < 252)
        {
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star_border</i>
            <i class="material-icons">star_border</i>
        }
        else if ((NoOfArt + NoOfBsn + NoOfCf) > 252 && (NoOfArt + NoOfBsn + NoOfCf) < 335)
        {
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star_border</i>
        }
        else
        {
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
            <i class="material-icons">star</i>
        }
        <a target="_blank" href="#" title="Hi, I am ranked from 1 to 5 stars based on 
           Number of amenities the gallery offers in and around it.">
            <img src="https://www.clipartmax.com/png/small/216-2165034_openoffice-blue-question-mark-png.png" height="13px" style="margin-bottom:15px;">
        </a>
    </div>
    <br />
    <br />
    <div class="learn">
        <b>
            To Learn More <i class="arrow right" style="border: solid black;
  border-width: 0 3px 3px 0;
  display: inline-block; padding: 3px;  transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);"></i>
        </b>
        <a href="#map">
            <img id="mapIcon" src="~/Content/images/mapIcon.svg" style="height:25px; width:25px; margin-left:3%;" />
        </a>
    </div>
</div>
@* Image comparison Experiment *@
<div class="img-comp-container">
    <div class="img-comp-img">
        <img src="~/Content/picture/@Model.Id/image1.jpg" width="400" height="250">
    </div>
    <div class="img-comp-img img-comp-overlay">
        <img src="~/Content/picture/@Model.Id/image2.jpg" width="400" height="250">
    </div>
</div>
@*<div class="img">
    <img class="top" src="~/Content/picture/@Model.Id/image1.jpg" />

</div>*@

<div class="hours">

</div>
<div class="watch">
    <i class="arrow down" style="border: solid black;
  border-width: 0 3px 3px 0;
  display: inline-block;
  left:50%;
  z-index:1;
  padding: 3px; transform: rotate(45deg);
  -webkit-transform: rotate(45deg);"></i>
</div>



<script type="text/javascript">
    TweenMax.from(".logo", 1.6, {
        delay: 6.4,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from(".download", 1.6, {
        delay: 6.5,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from(".heading", 1.6, {
        delay: 6.6,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from(".desc", 1.6, {
        delay: 6.7,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from("button", 1.6, {
        delay: 6.8,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });

    TweenMax.from(".watch", 1.6, {
        delay: 6.9,
        opacity: 0,
        y: 30,
        rotation: 90,
        ease: Expo.easeInOut
    });

    TweenMax.staggerFrom(".media ul li", 2, {
        delay: 7,
        opacity: 0,
        y: 40,
        ease: Expo.easeInOut
    }, 0.2);
    TweenMax.from(".amenitiesID", 1.6, {
        delay: 6.8,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });
    TweenMax.from(".Ranking", 1.6, {
        delay: 6.8,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });
        TweenMax.from(".learn", 1.6, {
        delay: 6.8,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });
      TweenMax.from(".img-comp-container", 1.6, {
        delay: 6.8,
        opacity: 0,
        y: 30,
        ease: Expo.easeInOut
    });
</script>
<div id="secondSection" class="container-fluid" style="margin-top:-33%; margin-right:0;">

    <div class="backColor"></div>
    <h1 style="font-size: 26px;">
        / This many people <br>
        / are walking past
    </h1>
    <h3 style="font-size: 16px;">More people walking past on the days this gallery is open, the better for your business!</h3>
    <!-- INSERT OPENING HOURS-->
    <div class="hours">
        <h1> Opening Hours </h1>
        <ul>
            <li>Mon: @Model.Monday </li>
            <li>Tue: @Model.Tuesday </li>
            <li>Wed: @Model.Wednesday</li>
            <li>Thu: @Model.Thursday</li>
            <li>Fri: @Model.Friday</li>
            <li>Sat: @Model.Saturday</li>
            <li>Sun: @Model.Sunday</li>

        </ul>
    </div>
    <!-- INSERT PEDESTRIAN CHART HERE-->
    <canvas id="lineChart" height="400" width="600"></canvas>

    <div class="thirdBanner"></div>
</div>
<div id="thirdSection" style=" position: relative;
    top: 200vh;
    margin: 5rem;" class="container">

    <div class="dummy2" style="margin-top: -150px;">
        <h1>What is near this gallery within a</h1>
        <h4 style=" font-family: " Roboto Lt", sans-serif;
            font-size: 4rem;
            text-align: center;
            letter-spacing: 0px;
            text-decoration-line: overline;">
            500m
        </h4>
        <h1>radius?</h1>
    </div>

    <!-- INSERT AMENITY ICONS HERE-->
    <div class="icons"></div>

    <!-- INSERT AMENITY CHART HERE-->
    <canvas id="radarChart" style=" position: absolute;
    left: 200px;
    top: 20px;" height="400" width="800"></canvas>


    <div class="forthBanner"><img src="~/Content/images/deco2.png" alt="" style="height: auto; width: 100vw;"></div>

</div>
<!-- FORTH SECTION STARTS HERE-->
<!--Map Section-->
<div id="forthSection" class="container" style="margin-bottom:100px; margin-top:100px;">
    <div class="dummy3" style="margin-top:100px;">
        <h1>How to get around if you are at this gallery?</h1>
        <h3 style="font-size:16px;">If you are after cafes, restaurants, bars, officeworks and anything else.</h3>

        <!-- INSERT THE MAP HERE-->
        <a name="map">
            <div class="map" style="margin-bottom:100px;">
                <div id="map" style="position:absolute;  height:400px; width: 700px; margin-bottom:75px;"></div>
                <div class="container">

                </div>
            </div>
        </a>

    </div>
    <a href="#first"><img id="toTop" style="float:right; bottom:0px; height:35px; width:35px;" src="~/Content/images/toTheTop.svg" title="To Top" /></a>

</div>

<script>
    // radar chart
    var NoOfCF1 = @NoOfArt;
    var toilet = @toilets;
    var transport1 = @transport;
    var foot1 = @foot;
    var traffic1 = 0;
    var entertainment = 0;
    var accessible = 0;
    var transportData1 = 0;
    // Computation for the graph
    if ((NoOfCF1) <= 10) {

        entertainment = 1;
    }
    else if ((NoOfCF1) > 10 && NoOfCF1 <= 22) {
        entertainment = 2;
    }
    else if (NoOfCF1 > 22 && NoOfCF1 <= 32) {
        entertainment = 3;
    }
    else if (NoOfCF1 > 32 && NoOfCF1 <= 40) {
        entertainment = 4;
    } else {
        entertainment = 5;
    }
    if ((toilet) == 0) {

        accessible = 1;
    }
    else if (toilet == 1) {
        accessible = 2;
    }
    else if (toilet == 2) {
        accessible = 3;
    }
    else if (toilet == 3) {
        accessible = 4;
    } else {
        accessible = 5;
    }
    if ((transport1) == 1) {

        transportData1 = 1;
    }
    else if (transport1 > 1 && transport1 <= 5 ) {
        transportData1 = 2;
    }
    else if (transport1 > 5 && transport1 <= 10) {
        transportData1 = 3;
    }
    else if (transport1 > 10 && transport1 <= 307) {
        transportData1 = 4;
    } else {
        transportData1 = 5;
    }
    if (foot1 <= 4000) {

        traffic1 = 1;
    }
    else if (foot1 > 4000 && foot1 <= 6000) {
        traffic1 = 2;
    }
    else if (foot1 > 6000 && foot1 <= 8000) {
        traffic1 = 3;
    }
    else if (foot1 > 8000 && foot1 <= 12000) {
        traffic1 = 4;
    } else {
        traffic1 = 5;
    }
    const CHART2 = document.getElementById("radarChart");
    console.log(CHART2);
    let radarChart = new Chart(CHART2, {
        type: 'radar',
        data: {
            labels: ["Entertainment", "Foot Traffic", "Transportation", "Accessibility"],
            datasets: [
                {
                    label: 'Rating of this gallery out of 5',
                    backgroundColor: "rgba(220,226,234,0.8)",
                    borderColor: "rgba(195,205,219,1)",
                    borderWidth: 3,
                    pointHoverBorderWidth: 8,
                    pointHoverBackgroundColor: "rgba(255,255,255,0)",
                    data: [entertainment,traffic1,transportData1,accessible]
                }
            ]
        },
        options: {
            responsive: false,
            maintainAspectRatio: this.maintainAspectRatio,
            title: {
                display: true,
                text: "Location evaluation ratings",
                fontSize: 16
            },
            label: {
                fontColor: "rgba(75,192,192,1)",
            },
            legend: {
                position: 'bottom',
                onClick: false,
                labels: {
                    padding: 20,
                }
            },
            scale: {
                ticks: {
                    beginAtZero: true,
                    max: 5,
                    maxTicksLimit: 5,
                    display: true,
                    backdropColor: 'transparent',
                },
                gridLines: {
                    circular: true, /* THIS DOES NOT WORK FML........ */
                    lineWidth: 0.6,
                },
                labels: {
                    padding: 20,
                },
                pointLabels :{
                    fontSize: 12,
                }
            }
        }
    });

    //line chart
    var monPed1 = @MonPed1;
    var tuesPed1 = @TuesPed1;
    var wedPed1 = @WedPed1;
    var thursPed1 = @ThursPed1;
    var friPed1 = @FriPed1;
    var satPed1 = @SatPed1;
    var sunPed1 = @SunPed1;
    // line chart variables 2
    var monPed2 = @MonPed2;
    var tuesPed2 = @TuesPed2;
    var wedPed2 = @WedPed2;
    var thursPed2 = @ThursPed2;
    var friPed2 = @FriPed2;
    var satPed2 = @SatPed2;
    var sunPed2 = @SunPed2;
    //line chart variables 3
    var monPed3 = @MonPed3;
    var tuesPed3 = @TuesPed3;
    var wedPed3 = @WedPed3;
    var thursPed3 = @ThursPed3;
    var friPed3 = @FriPed3;
    var satPed3 = @SatPed3;
    var sunPed3 = @SunPed3;
    const CHART = document.getElementById("lineChart");
    console.log(CHART);
    let lineChart = new Chart(CHART, {
        type: 'line',
        data: {
            labels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "sun"],
            datasets: [
                {
                    label: "Historical Records",
                    fill: false,
                    lineTension: 0.4,
                    backgroundColor: "rgb(82,105,136,0.8)",
                    borderColor: "rgb(82,105,136)",
                    borderCapStyle: "butt",
                    borderDash: [],
                    borderDashOffset: 0.0,
                    boderJoinStyle: 'miter',
                    pointBorderColor: 'white',
                    pointBackgroundColor: "#fff",
                    pointBorderWidth: 2,
                    pointHoverRadius: 10,
                    pointHoverBackgroundColor: "rgb(82,105,136,0.8)",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointHoverBorderWidth: 8,
                    pointRadius: 1,
                    pointHitRadius: 10,
                    data: [monPed1, tuesPed1, wedPed1, thursPed1, friPed1, satPed1, sunPed1]
                }, {
                    label: "Pedestrian Count Prediction For Next Week",
                    fill: false,
                    lineTension: 0.4,
                    backgroundColor: "rgb(220,226,234)",
                    borderColor: "rgb(82,105,136,0.3)",
                    borderCapStyle: "butt",
                    borderDash: [],
                    borderDashOffset: 0.0,
                    boderJoinStyle: 'miter',
                    pointBorderColor: 'white',
                    pointBackgroundColor: "#fff",
                    pointBorderWidth: 2,
                    pointHoverRadius: 10,
                    pointHoverBackgroundColor: "rgb(220,226,234)",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointHoverBorderWidth: 8,
                    pointRadius: 1,
                    pointHitRadius: 10,
                    data: [monPed2, tuesPed2, wedPed2, thursPed2, friPed2, satPed2, sunPed2]
                },
                {
                    label: "Pedestrian Count Prediction For Next Month",
                    fill: false,
                    lineTension: 0.4,
                    backgroundColor: "rgb(194,182,208,0.5)",
                    borderColor: "rgb(194,182,208)",
                    borderCapStyle: "butt",
                    borderDash: [],
                    borderDashOffset: 0.0,
                    boderJoinStyle: 'miter',
                    pointBorderColor: 'white',
                    pointBackgroundColor: "#fff",
                    pointBorderWidth: 2,
                    pointHoverRadius: 10,
                    pointHoverBackgroundColor: "rgb(194,182,208,0.5)",
                    pointHoverBorderColor: "rgba(220,220,220,1)",
                    pointHoverBorderWidth: 8,
                    pointRadius: 1,
                    pointHitRadius: 10,
                    data: [monPed3, tuesPed3, wedPed3, thursPed3, friPed3, satPed3, sunPed3]
                }
            ]
        },
        options: {
            responsive: false,
            maintainAspectRatio: this.maintainAspectRatio,
            title: {
                display: true,
                text: "Number of pedestrian count during a week",
                fontSize: 16,
            },
            legend: {
                position: 'bottom',

                labels: {
                    padding: 20,
                }
            }
        }

    });



    //map
    var longitude = @Model.Longitude;
    var latitude = @Model.Latitude;
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXJhdmluZC1jeWJlciIsImEiOiJjam1tenl0ZGcwaW0wM3BrNDRkNHRmZzdpIn0.gYT_2NFoZwQ8SboZ1r6LcQ';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [longitude, latitude],
        zoom: 12.3
    });



    var marker = new mapboxgl.Marker()
        .setLngLat([longitude, latitude])
        .addTo(map);


    function getRoute(end) {
        // make a directions request using cycling profile
        var url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + longitude + ',' + latitude + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=pk.eyJ1IjoiYXJhdmluZC1jeWJlciIsImEiOiJjam1tenl0ZGcwaW0wM3BrNDRkNHRmZzdpIn0.gYT_2NFoZwQ8SboZ1r6LcQ'
        console.log(url);

        // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest
        var req = new XMLHttpRequest();
        req.responseType = 'json';
        req.open('GET', url, true);
        req.onload = function () {
            var data = req.response.routes[0];
            var route = data.geometry.coordinates;
            var geojson = {
                type: 'Feature',
                properties: {},
                geometry: {
                    type: 'LineString',
                    coordinates: route
                }
            };
            // if the route already exists on the map, reset it using setData
            if (map.getSource('route')) {
                map.getSource('route').setData(geojson);
            } else { // otherwise, make a new request
                map.addLayer({
                    id: 'route',
                    type: 'line',
                    source: {
                        type: 'geojson',
                        data: {
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'LineString',
                                coordinates: geojson
                            }
                        }
                    },
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    paint: {
                        'line-color': '#3887be',
                        'line-width': 5,
                        'line-opacity': 0.75
                    }
                });
            }
            var instructions = document.getElementById('instructions');
            var steps = data.legs[0].steps;

            var tripInstructions = [];
            for (var i = 0; i < steps.length; i++) {
                tripInstructions.push('<br><li>' + steps[i].maneuver.instruction) + '</li>';
                instructions.innerHTML = '<br><h4><b>Search Results like Cafe, Business, Restaurants in the proximity of the Gallery</b></h4><span class="duration">Trip duration: ' + Math.floor(data.duration / 60) + ' min 🚴 ' + Math.floor(data.distance) + ' meters </span>';
            }
        };
        req.send();
    }
    // Add the geocoder to the map


    var geocoder = new MapboxGeocoder({ // Initialize the geocoder
        accessToken: 'pk.eyJ1IjoiYXJhdmluZC1jeWJlciIsImEiOiJjam1tenl0ZGcwaW0wM3BrNDRkNHRmZzdpIn0.gYT_2NFoZwQ8SboZ1r6LcQ', // Set the access token
        placeholder: 'Type in Cafe/Restaurant/Business etc ..', // Placeholder text for the search bar
        bbox: [144.939128, -37.823089, 144.98376, -37.800214], // Boundary for Berkeley
        proximity: {
            longitude: longitude,
            latitude: latitude
        }
    });

    map.addControl(geocoder);

    map.on('load', function () {
        // make an initial directions request that
        // starts and ends at the same location
        var start = [window.longitude, window.latitude];

        getRoute(start);

        // Add starting point to the map
        map.addLayer({
            id: 'mypoint',
            type: 'circle',
            source: {
                type: 'geojson',
                data: {
                    type: 'FeatureCollection',
                    features: [{
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'Point',
                                coordinates: start
                            }
                        }
                    ]
                }
            },
            paint: {
                'circle-radius': 10,
                'circle-color': '#3887be'
            }
        });

        map.addSource('single-point', {
            type: 'geojson',
            data: {
                type: 'FeatureCollection',
                features: []
            }
        });

        map.addLayer({
            id: 'point',
            source: 'single-point',
            type: 'circle',
            paint: {
                'circle-radius': 10,
                'circle-color': '#448ee4'
            }
        });


        // Listen for the `result` event from the Geocoder
        // `result` event is triggered when a user makes a selection
        //  Add a marker at the result's coordinates
        geocoder.on('result', function (e) {
            window.coor = e.result.geometry;
            map.getSource('single-point').setData(e.result.geometry);
            console.log(window.coor.coordinates);
            getRoute(window.coor.coordinates);
        });


    });
    map.addControl(new mapboxgl.NavigationControl());

    //
    function initComparisons() {
  var x, i;
  /* Find all elements with an "overlay" class: */
  x = document.getElementsByClassName("img-comp-overlay");
  for (i = 0; i < x.length; i++) {
    /* Once for each "overlay" element:
    pass the "overlay" element as a parameter when executing the compareImages function: */
    compareImages(x[i]);
  }
  function compareImages(img) {
    var slider, img, clicked = 0, w, h;
    /* Get the width and height of the img element */
    w = img.offsetWidth;
    h = img.offsetHeight;
    /* Set the width of the img element to 50%: */
    img.style.width = (w / 2) + "px";
    /* Create slider: */
    slider = document.createElement("DIV");
    slider.setAttribute("class", "img-comp-slider");
    /* Insert slider */
    img.parentElement.insertBefore(slider, img);
    /* Position the slider in the middle: */
    slider.style.top = (h / 2) - (slider.offsetHeight / 2) + "px";
    slider.style.left = (w / 2) - (slider.offsetWidth / 2) + "px";
    /* Execute a function when the mouse button is pressed: */
    slider.addEventListener("mousedown", slideReady);
    /* And another function when the mouse button is released: */
    window.addEventListener("mouseup", slideFinish);
    /* Or touched (for touch screens: */
    slider.addEventListener("touchstart", slideReady);
     /* And released (for touch screens: */
    window.addEventListener("touchstop", slideFinish);
    function slideReady(e) {
      /* Prevent any other actions that may occur when moving over the image: */
      e.preventDefault();
      /* The slider is now clicked and ready to move: */
      clicked = 1;
      /* Execute a function when the slider is moved: */
      window.addEventListener("mousemove", slideMove);
      window.addEventListener("touchmove", slideMove);
    }
    function slideFinish() {
      /* The slider is no longer clicked: */
      clicked = 0;
    }
    function slideMove(e) {
      var pos;
      /* If the slider is no longer clicked, exit this function: */
      if (clicked == 0) return false;
      /* Get the cursor's x position: */
      pos = getCursorPos(e)
      /* Prevent the slider from being positioned outside the image: */
      if (pos < 0) pos = 0;
      if (pos > w) pos = w;
      /* Execute a function that will resize the overlay image according to the cursor: */
      slide(pos);
    }
    function getCursorPos(e) {
      var a, x = 0;
      e = e || window.event;
      /* Get the x positions of the image: */
      a = img.getBoundingClientRect();
      /* Calculate the cursor's x coordinate, relative to the image: */
      x = e.pageX - a.left;
      /* Consider any page scrolling: */
      x = x - window.pageXOffset;
      return x;
    }
    function slide(x) {
      /* Resize the image: */
      img.style.width = x + "px";
      /* Position the slider: */
      slider.style.left = img.offsetWidth - (slider.offsetWidth / 2) + "px";
    }
  }
        }
    initComparisons();
</script>